import{readFile as g}from"fs/promises";import{config as w}from"dotenv";import B from"crypto";import Z from"fastify";import{MongoClient as S}from"mongodb";import{AccountAddress as I,createConcordiumClient as y,serializeUpdateContractParameters as N}from"@concordium/node-sdk";import{credentials as h}from"@grpc/grpc-js";import T from"tweetnacl";import v from"bs58";const{decode:D}=v;w();const G="//8CAQAAAAkAAABjaXMyX3dDQ0QBABQAAgAAAAMAAAB1cmwWAgQAAABoYXNoFQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAAEyAAAAACAQAAAAkAAABiYWxhbmNlT2YGEAEUAAIAAAAIAAAAdG9rZW5faWQdAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADBABGyUAAAAVBAAAAA4AAABJbnZhbGlkVG9rZW5JZAIRAAAASW5zdWZmaWNpZW50RnVuZHMCDAAAAFVuYXV0aG9yaXplZAIGAAAAQ3VzdG9tAQEAAAAVCQAAAAsAAABQYXJzZVBhcmFtcwIHAAAATG9nRnVsbAIMAAAATG9nTWFsZm9ybWVkAg4AAABDb250cmFjdFBhdXNlZAITAAAASW52b2tlQ29udHJhY3RFcnJvcgITAAAASW52b2tlVHJhbnNmZXJFcnJvcgIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24C",R=async()=>{const n=await new S(process.env.MONGODB_URL).connect();console.info("MONGODB CONNECTED");const s=n.db(process.env.MONGODB_NAME).collection("users"),c=y(process.env.CCD_ADDRESS,Number(process.env.CCD_PORT),h.createSsl());await E(Number(process.env.PORT),s,c)};async function E(n,s,c){const t=Z();t.get("/user",async(r,e)=>{const a=r.query.email,i=r.query.pass;if(console.log({email:a,pass:i}),a===void 0||i===void 0)e.status(400).send("Missing Params email or pass");else{const d=await s.findOne({email:a,pass:i});if(d==null)e.status(404).send("Invalid username or password");else{const A={address:d.address,nfts:[]};e.header("Content-Type","application/json").send(JSON.stringify(A))}}}),t.put("/signin",async(r,e)=>{const a=r.body,i=a.email,d=a.pass,A=a.address,f=a.signature;if(i&&d&&A&&f){const u=JSON.stringify({email:i,pass:d}),m=p(A);if(await O(u,m,f,c)){const l=await s.findOne({email:i});l?l.address===A?(await s.updateOne({_id:l._id},{$set:{address:A,email:i,pass:d}}),e.send("success")):e.status(403).send("An Address is already associated with that email"):(await s.insertOne({address:A,email:i,pass:d}),e.send("success"))}else e.status(403).send("Invalid Signature")}else e.status(400).send("Missing Parameters")}),t.get("/sign",async(r,e)=>{e.header("Content-Type","text/html").send(await g("frontend/public/index.html"))}),t.get("/sign/index.js",async(r,e)=>{e.header("Content-Type","text/javascript").send(await g("frontend/public/index.js"))}),t.get("/index.js",async(r,e)=>{e.header("Content-Type","text/javascript").send(await g("frontend/public/index.js"))});const o=await t.listen({port:n,host:"0.0.0.0"});console.log(`Server ${o}`)}async function O(n,s,c,t){const o=await V(s,t);return x(o,s,Buffer.from(n,"utf8"),c)}async function V(n,s){const c=await s.getAccountInfo(n),t=new Map,o=b(c.accountCredentials);for(const[a,i]of o)t.set(a,i.value.contents.credentialPublicKeys);return{threshold:c.accountThreshold,keys:t}}function p(n){return I.fromBytes(Buffer.from(D(n).subarray(1,33)))}function x(n,s,c,t){const o=B.createHash("sha256");o.update(s.decodedAddress),o.update(new Uint8Array(8)),o.update(c);const r=o.digest(),e=b(t);if(n.threshold>e.size)return!1;for(const[a,i]of e){const d=b(i),A=n.keys.get(a);if(A===void 0||A.threshold>d.size)return!1;for(const[f,u]of d)if(A.keys.hasOwnProperty(f)){const m=A.keys[f];if(!T.sign.detached.verify(r,Buffer.from(u,"hex"),Buffer.from(m.verifyKey,"hex")))return!1}else return!1}return!0}function b(n){const s=new Map;for(const c in n)n.hasOwnProperty(c)&&s.set(c,n[c]);return s}async function C(n,s,c){const t=await c.getInstanceInfo({index:n,subindex:BigInt(0)}),o="init_";if(t){if(!t.name.startsWith(o))throw new Error(`name "${t.name}" doesn't start with "init_"`);const r=t.name.substring(o.length),e=s.address,a=Buffer.from(G,"base64");console.log({rawSchema:a});const i=N(r,"balanceOf",[{address:{Account:[e]},token_id:""}],a),d=`${r}.view`,A=await c.invokeContract({contract:{index:n,subindex:BigInt(0)},method:d,parameter:i});return console.log(JSON.stringify(A,(f,u)=>typeof u=="bigint"?u.toString():u," ")),A}throw new Error("Something went wrong")}const q=async()=>{const n="3sHi2FD6vdHRe8UAwEuiPMvAZBYpHKZgiNSfDJ8GRL4ygTPno5",s="88ddc1b0926c7e8c3993926361a20ce1325591e77cbd0fb262d39f16d162cc16f77ee960ad791b06b54f9fab41042a1fc0ec74b979b76b3d83309041c849b407",c="hello",t="4mZTZwDaKdXUs4FmwWo1j7zJxjjnNyQSrD1LkZ2TLmThHdZiYi",o=y(process.env.CCD_ADDRESS,Number(process.env.CCD_PORT),h.createSsl()),r=p(n),e=p(t);console.log(await o.getInstanceInfo({index:BigInt(81),subindex:BigInt(0)})),console.log(await o.getInstanceInfo({index:BigInt(2059),subindex:BigInt(0)})),console.log(await C(BigInt(81),e,o)),console.log(await C(BigInt(81),r,o))};R();
